/************************************************************************/
【目次】
1.必須kotlinコード
2.基礎構文
    2-1.変数・定数の定義
    2-2.配列の定義
    2-3.if条件式
    2-4.when条件式
        2-4-1.when-boolean
    2-5.for繰り返し
        2-5-1.配列の要素を全て出力
        2-5-2.配列の添字(index)を利用する
        2-5-3.範囲式を利用する
        2-5-4.範囲式を利用する(downTo)
        2-5-5.範囲式を利用する(step)
    2-6.while繰り返し
        2-6-1.do-while繰り返し
    2-7.List,Set,Mapについて
        2-7-1.List
            2-7-1-1.listOf関数
            2-7-1-2.mutableListOf関数
        2-7-2.Set
            2-7-2-1.setOf関数
            2-7-2-2.mutableSetOf関数
        2-7-3.Map
            2-7-3-1.mapOf関数
            2-7-3-2.mutableMapOf関数
3.sample code
    3-1.buttonをclickした時の動作

/************************************************************************/

// 1.必須kotlinコード

// viewBinding要素を追加( build.gradle(モジュール: プロジェクト.app)へ )
buildFeatures {
    viewBinding = true
}

// viewBindingの設定
private lateinit var binding: ActivityMainBinding

// onCreate句の中に
binding = ActivityMainBinding.inflate(layoutInflater)

// 変更行
setContentView(R.layout.activity_main)
// 下に変更
val view = binding.root
setContentView(view)



// 2.基礎構文

/* 2-1.変数・定数の定義 */
val 定数名: 型 //固定値
var 変数名: 型 //変数値

/* 型は "必ず明記" すること */


/* 2-2.配列の定義 */
val arrayOfInt: Array<Int> = arrayOf(1,2,3,5,8)
( 配列名: Array<型> = arrayOf(要素) )

/* 型は "必ず明記" すること */


/* 2-3.if条件式 */
変数 = if(条件式){
    (trueのとき)
} else {
    (falseのとき)
}

/* 括弧の開始は "条件式と同じ行" から開始すること */


/* 2-4.when条件式 */
when (条件式){
    値1 -> 処理
    値2 -> 処理
    ...
    else -> 処理
}

/* 2-4-1.when-boolean */
when (条件式){
    booleanを返す式 -> 処理
    booleanを返す式 -> 処理
    ...
    else -> 処理
}


/* 2-5.for繰り返し */
for (変数 in iteratable object){
    処理
}

/* 2-5-1.配列の要素を全て出力 */
val array = arrayOf(1,2,3,10,100,1000) 
for (a in array){
    print($a)
}
--------------------------------------
result:1,2,3,10,100,1000

/* 2-5-2.配列の添字(index)を利用する */
val a = arrayOf(1,2,3,10,100,1000)
for (i in a.indices) {
    print("a[$i]=${a[i]} ")
}
--------------------------------------
result:a[0]=1 a[1]=2 a[2]=3 a[3]=10 a[4]=100 a[5]=1000

/* 2-5-3.範囲式を利用する */
for (i in 1..4)
print(i)
--------------
result:1234

/* 2-5-4.範囲式を利用する(downTo) */
for (i in 4 downTo 1)
print(i)
---------------------
result:4321

/* 2-5-5.範囲式を利用する(step) */
for (i in 0..9 step 2)
print(i)
----------------------
result:02468


/* 2-6.while繰り返し */
while (条件式) {
    処理
}

/* 2-6-1.do-while繰り返し */
do{
    処理
}while (条件式)

/* 必ず1度処理が実行される */


/* 2-7.List,Set,Mapについて */
List:要素の順番を保持 要素の重複可
Set:要素の順番保持しない 要素の重複不可
Map:キーと値が対になった要素を保持 キーの重複不可

/* 2-7-1.List */
//読み取り専用リストの生成
listOf(値1,値2,値3,…,値n)
//変更可能なリストの生成
mutableListOf(値1,値2,値3,…,値n)

/* 2-7-1-1.listOf関数 */
val items(←リスト名): List<String(←型)> = listOf("First","Second","Third")
println(items.get(0)) (result:First)
println(items[1]) (result:Second)
println(items.size) (result:3)

/* 2-7-1-2.mutableListOf関数 */
val numbers: MutableList<Int> = mutableListOf(2,4,6)
println(numbers) (result:[2, 4, 6])
numbers.add(4)
println(numbers) (result:[2, 4, 6, 4])
numbers.remove(4)
println(numbers) (result:[2, 6, 4])

/* 2-7-2.Set */
//読み取り専用セットの生成
setOf(値1,値2,値3,…,値n)
//変更可能なセットの生成
mutableSetOf(値1,値2,値3,…,値n)

/* 2-7-2-1.setOf関数 */
var strings: Set<String> = setOf("A","B","C")
println(strings) (result:[A, B, C])

/* 2-7-2-2.mutableSetOf関数 */
var strings: MutableSet<String> = mutableSetOf("x","y","z")
strings.add("A")
println(strings) (result:[x, y, z, A])
strings.remove("x")
println(strings) (result:[y, z, A])
strings.add("y")
println(strings) (result:[y, z, A])

/* 2-7-3.Map */
//読み取り専用マップの生成
mapOf(キー1 to 値1,キー2 to 値2,…,キーn to 値n)
//変更可能なマップの生成
mutableMapOf(キー1 to 値1,キー2 to 値2,…,キーn to 値n)

/* 2-7-3-1.mapOf関数 */
val fruits: Map<String,Int> = mapOf("apple" to 1, "orange" to 2, "banana" to 3)
print(fruits)
-------------------------------------------------------------------------------
result:{apple=1, orange=2, banana=3}

/* 2-7-3-2.mutableMapOf関数 */



// 3.sample code

/* 3-1. buttonをclickした時の動作 */
binding./* buttonのID */.setOnClickListener {
    binding.textView.text = /* "変更後の文字列" */
}


/* 2. */